#from firebase import Firebase
#from firebase_admin import db
#from firebase_admin import credentials
#from firebase_admin import storage
#import firebase_admin
import numpy as np
import urllib.request
import cv2
import pyrebase
#import os
import math as mt
import math  # Q
#from PIL import Image, ImageFilter

import imutils
#import requests
#import matplotlib.image as mpimg
#import urllib

import pandas as pd
#import glob
import skimage.io as io  # scikit-image
#from skimage.io import imread, imshow
from matplotlib import pyplot as plt
#from skimage import io, color, img_as_ubyte
#from skimage.feature import greycomatrix, greycoprops
#from sklearn.metrics.cluster import entropy

import datetime

enhancement = ""
segmenation = ""


# bluring function
def blurfun(data):
    new_image = data.copy()
    # the open cv read image in 'B G R' but matplotlib 'R G B' so we convert it by cvtColor
    image = cv2.cvtColor(np.array(new_image), cv2.COLOR_BGR2GRAY)
    # image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # convert to HSV
    figure_size = 9  # the dimension of the x and y axis of the kernal.
    image2 = cv2.blur(image, (figure_size, figure_size))
    plt.imsave('blurfun.jpg', image2)
    return image2


# Speckle Noise removing function
def crimmins(data):
    data = blurfun(data)
    new_image = data.copy()
    nrow = len(data)
    ncol = len(data[0])

    # Dark pixel adjustment

    # First Step
    # N-S
    for i in range(1, nrow):
        for j in range(ncol):
            if data[i - 1, j] >= (data[i, j] + 2):
                new_image[i, j] += 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(ncol - 1):
            if data[i, j + 1] >= (data[i, j] + 2):
                new_image[i, j] += 1
    data = new_image
    # NW-SE
    for i in range(1, nrow):
        for j in range(1, ncol):
            if data[i - 1, j - 1] >= (data[i, j] + 2):
                new_image[i, j] += 1
    data = new_image
    # NE-SW
    for i in range(1, nrow):
        for j in range(ncol - 1):
            if data[i - 1, j + 1] >= (data[i, j] + 2):
                new_image[i, j] += 1
    data = new_image
    # Second Step
    # N-S
    for i in range(1, nrow - 1):
        for j in range(ncol):
            if (data[i - 1, j] > data[i, j]) and (data[i, j] <= data[i + 1, j]):
                new_image[i, j] += 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(1, ncol - 1):
            if (data[i, j + 1] > data[i, j]) and (data[i, j] <= data[i, j - 1]):
                new_image[i, j] += 1
    data = new_image
    # NW-SE
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i - 1, j - 1] > data[i, j]) and (data[i, j] <= data[i + 1, j + 1]):
                new_image[i, j] += 1
    data = new_image
    # NE-SW
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i - 1, j + 1] > data[i, j]) and (data[i, j] <= data[i + 1, j - 1]):
                new_image[i, j] += 1
    data = new_image
    # Third Step
    # N-S
    for i in range(1, nrow - 1):
        for j in range(ncol):
            if (data[i + 1, j] > data[i, j]) and (data[i, j] <= data[i - 1, j]):
                new_image[i, j] += 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(1, ncol - 1):
            if (data[i, j - 1] > data[i, j]) and (data[i, j] <= data[i, j + 1]):
                new_image[i, j] += 1
    data = new_image
    # NW-SE
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i + 1, j + 1] > data[i, j]) and (data[i, j] <= data[i - 1, j - 1]):
                new_image[i, j] += 1
    data = new_image
    # NE-SW
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i + 1, j - 1] > data[i, j]) and (data[i, j] <= data[i - 1, j + 1]):
                new_image[i, j] += 1
    data = new_image
    # Fourth Step
    # N-S
    for i in range(nrow - 1):
        for j in range(ncol):
            if (data[i + 1, j] >= (data[i, j] + 2)):
                new_image[i, j] += 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(1, ncol):
            if (data[i, j - 1] >= (data[i, j] + 2)):
                new_image[i, j] += 1
    data = new_image
    # NW-SE
    for i in range(nrow - 1):
        for j in range(ncol - 1):
            if (data[i + 1, j + 1] >= (data[i, j] + 2)):
                new_image[i, j] += 1
    data = new_image
    # NE-SW
    for i in range(nrow - 1):
        for j in range(1, ncol):
            if (data[i + 1, j - 1] >= (data[i, j] + 2)):
                new_image[i, j] += 1
    data = new_image

    # Light pixel adjustment

    # First Step
    # N-S
    for i in range(1, nrow):
        for j in range(ncol):
            if (data[i - 1, j] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(ncol - 1):
            if (data[i, j + 1] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # NW-SE
    for i in range(1, nrow):
        for j in range(1, ncol):
            if (data[i - 1, j - 1] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # NE-SW
    for i in range(1, nrow):
        for j in range(ncol - 1):
            if (data[i - 1, j + 1] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # Second Step
    # N-S
    for i in range(1, nrow - 1):
        for j in range(ncol):
            if (data[i - 1, j] < data[i, j]) and (data[i, j] >= data[i + 1, j]):
                new_image[i, j] -= 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(1, ncol - 1):
            if (data[i, j + 1] < data[i, j]) and (data[i, j] >= data[i, j - 1]):
                new_image[i, j] -= 1
    data = new_image
    # NW-SE
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i - 1, j - 1] < data[i, j]) and (data[i, j] >= data[i + 1, j + 1]):
                new_image[i, j] -= 1
    data = new_image
    # NE-SW
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i - 1, j + 1] < data[i, j]) and (data[i, j] >= data[i + 1, j - 1]):
                new_image[i, j] -= 1
    data = new_image
    # Third Step
    # N-S
    for i in range(1, nrow - 1):
        for j in range(ncol):
            if (data[i + 1, j] < data[i, j]) and (data[i, j] >= data[i - 1, j]):
                new_image[i, j] -= 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(1, ncol - 1):
            if (data[i, j - 1] < data[i, j]) and (data[i, j] >= data[i, j + 1]):
                new_image[i, j] -= 1
    data = new_image
    # NW-SE
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i + 1, j + 1] < data[i, j]) and (data[i, j] >= data[i - 1, j - 1]):
                new_image[i, j] -= 1
    data = new_image
    # NE-SW
    for i in range(1, nrow - 1):
        for j in range(1, ncol - 1):
            if (data[i + 1, j - 1] < data[i, j]) and (data[i, j] >= data[i - 1, j + 1]):
                new_image[i, j] -= 1
    data = new_image
    # Fourth Step
    # N-S
    for i in range(nrow - 1):
        for j in range(ncol):
            if (data[i + 1, j] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # E-W
    for i in range(nrow):
        for j in range(1, ncol):
            if (data[i, j - 1] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # NW-SE
    for i in range(nrow - 1):
        for j in range(ncol - 1):
            if (data[i + 1, j + 1] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image
    # NE-SW
    for i in range(nrow - 1):
        for j in range(1, ncol):
            if (data[i + 1, j - 1] <= (data[i, j] - 2)):
                new_image[i, j] -= 1
    data = new_image

    # enhancement=upload_img(new_image.copy(),"enhancement")
    plt.imsave('speckle.jpg', new_image.copy())
    return new_image.copy()  # output of Speckle


# Segmentation function
def watershed(data):
    # data = blurfun(data)
    data = crimmins(data)
    new_image = data.copy()
    # plt.imshow(new_image)
    # gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # plt.imshow(gray)
    # ret, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
    ret, thresh1 = cv2.threshold(new_image, 120, 255, cv2.THRESH_BINARY_INV)
    # noise removal
    kernal = np.ones((3, 3), np.uint8)
    opening = cv2.morphologyEx(thresh1, cv2.MORPH_OPEN, kernal, iterations=2)
    # plt.imshow(opening)

    # sure background area
    sure_bg = cv2.dilate(opening, kernal, iterations=350)
    plt.figure()
    # plt.imshow(sure_bg)
    plt.imsave('test.jpg', sure_bg)

    # finding sure foreground
    dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
    ret, sure_fg = cv2.threshold(dist_transform, 0.01 * dist_transform.max(), 255, 0)
    plt.figure()
    # plt.imshow(sure_fg)
    # plt.imsave('test.pgm', sure_fg)

    # finding unkown region
    sure_fg = np.uint8(sure_fg)
    unkown = cv2.subtract(sure_bg, sure_fg)
    plt.figure()
    # plt.imshow(unkown)

    # load in your original image
    originalImage = new_image  # cv2.imread(imagepath, 0)

    # load in your mask
    mask = cv2.imread('test.jpg', 0)

    # Get rid of quantization artifacts
    mask[mask == 0] = 0
    mask[mask > 216] = 1
    mask[mask < 215] = 0

    # create output image
    outputImg = originalImage * (mask == 1)
    # plt.imshow(outputImg)
    # plt.show()
    outputImg[mask == 0] = 220
    # plt.imshow(outputImg)
    ret, thresh2 = cv2.threshold(outputImg, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    # plt.imshow(thresh2)
    cv2.imwrite('LastVer.jpg', thresh2)
    imaage = cv2.imread('LastVer.jpg')
    ttry = imaage
    height, width, depth = imaage.shape
    for i in range(0, height):
        for j in range(0, width):
            if (imaage[i, j] == 0).all():
                ttry[i, j] = originalImage[i, j]
            else:
                ttry[i, j] = 0
            j = j + 1
        i = i - 1
    # plt.imshow(ttry)
    # cv2.imwrite('new.jpg', ttry)
    # print('finish')

    # bucket = storage.bucket()
    #
    # image_data = requests.get(image_url).content
    # blob = bucket.blob(ttry)
    # blob.upload_from_string(
    #     image_data,
    #     content_type='image/jpg'
    # )
    # print(blob.public_url)
    # segmenation=upload_img(ttry,"segmentation")
    # cv2.imshow(ttry)
    # plt.imshow(ttry)
    plt.imsave('watershade.jpg', ttry)
    return ttry


# Feature extraction function
class GLCM:
    def __init__(self, image, dy, dx):
        self.image = image
        self.dy = dy
        self.dx = dx
        self.glcm = self.GLCMcount()
        self.kontras, self.meanI, self.meanJ, self.energy, self.homogenity = self.contrast()
        self.taoI, self.taoJ = self.tao()
        self.korelasion = self.correlation()
        # self.entropyy=self.Calentropy()

    def GLCMcount(self):
        height, width = self.image.shape[:2]
        glcm = np.zeros((256, 256, 3), np.double)
        x = 0
        for i in range(height):
            for j in range(width):
                if i + self.dy in range(height) and j + self.dx in range(width):
                    glcm[self.image[i, j, 0], self.image[i +
                                                         self.dy, j + self.dx, 0], 0] += 1
                    glcm[self.image[i, j, 1], self.image[i +
                                                         self.dy, j + self.dx, 1], 1] += 1
                    glcm[self.image[i, j, 2], self.image[i +
                                                         self.dy, j + self.dx, 2], 2] += 1
                    # print str(image[i,j,0]) + " " + str(image[i+dy,j+dx,0]) + "
                    # " + str(glcm[image[i,j,0],image[i+dy,j+dx,0],0])
                    x += 1
        glcm = glcm / x
        return glcm

    # def Calentropy(self):
    # grayImg = img_as_ubyte(color.rgb2gray(self.image))
    # entropyy=entropy(grayImg)
    # return entropyy
    def contrast(self):
        contrast = np.zeros(3, np.float)
        meanI = np.zeros(3, np.float)
        meanJ = np.zeros(3, np.float)
        energy = np.zeros(3, np.float)
        homogenity = np.zeros(3, np.float)
        for i in range(256):
            for j in range(256):
                contrast[0] += pow(i - j, 2) * self.glcm[i, j, 0]
                contrast[1] += pow(i - j, 2) * self.glcm[i, j, 1]
                contrast[2] += pow(i - j, 2) * self.glcm[i, j, 2]
                meanI[0] += i * self.glcm[i, j, 0]
                meanI[1] += i * self.glcm[i, j, 1]
                meanI[2] += i * self.glcm[i, j, 2]
                meanJ[0] += j * self.glcm[i, j, 0]
                meanJ[1] += j * self.glcm[i, j, 1]
                meanJ[2] += j * self.glcm[i, j, 2]
                energy[0] += pow(self.glcm[i, j, 0], 2)
                energy[1] += pow(self.glcm[i, j, 1], 2)
                energy[2] += pow(self.glcm[i, j, 2], 2)
                homogenity[0] += self.glcm[i, j, 0] / (1 + abs(i - j))
                homogenity[1] += self.glcm[i, j, 1] / (1 + abs(i - j))
                homogenity[2] += self.glcm[i, j, 2] / (1 + abs(i - j))
        return contrast, meanI, meanJ, energy, homogenity

    def correlation(self):
        correlation = np.zeros(3, np.float)
        for i in range(256):
            for j in range(256):
                correlation[0] += ((i - self.meanI[0]) * (j - self.meanJ[0])
                                   * self.glcm[i, j, 0]) / (self.taoI[0] * self.taoJ[0])
                correlation[1] += ((i - self.meanI[1]) * (j - self.meanJ[1])
                                   * self.glcm[i, j, 1]) / (self.taoI[1] * self.taoJ[1])
                correlation[2] += ((i - self.meanI[2]) * (j - self.meanJ[2])
                                   * self.glcm[i, j, 2]) / (self.taoI[2] * self.taoJ[2])
                # print correlation;
        return correlation

    def tao(self):
        taoI = np.zeros(3, np.float)
        taoJ = np.zeros(3, np.float)
        for i in range(256):
            for j in range(256):
                taoI[0] += pow(i - self.meanI[0], 2) * self.glcm[i, j, 0]
                taoI[1] += pow(i - self.meanI[1], 2) * self.glcm[i, j, 1]
                taoI[2] += pow(i - self.meanI[2], 2) * self.glcm[i, j, 2]
                taoJ[0] += pow(j - self.meanJ[0], 2) * self.glcm[i, j, 0]
                taoJ[1] += pow(j - self.meanJ[1], 2) * self.glcm[i, j, 1]
                taoJ[2] += pow(j - self.meanJ[2], 2) * self.glcm[i, j, 2]
                # print str(taoJ[2])+" = "+ str(pow(j-meanJ[2],2)) + " x " + str(glcm[i,j,2])
        # print "taoi = "
        # print taoI
        # print "taoj = "
        # print taoJ
        for i in range(3):
            taoI[i] = math.sqrt(taoI[i])
            taoJ[i] = math.sqrt(taoJ[i])
        return taoI, taoJ

    def printglcm(self):

        print("meanI = " + str(rgb2gs(self.meanI)))
        print("meanJ = " + str(rgb2gs(self.meanJ)))
        print("taoI = " + str(rgb2gs(self.taoI)))
        print("taoJ = " + str(rgb2gs(self.taoJ)))
        print("kontras = " + str(rgb2gs(self.kontras)))
        print("Energy = " + str(rgb2gs(self.energy)))
        print("Homogenitas = " + str(rgb2gs(self.homogenity)))
        print("Correlation = " + str(rgb2gs(self.korelasion)))

    def writeglcm(self):
        with open("test.txt", "a") as myfile:
            myfile.write(str(rgb2gs(self.kontras)) + " " + str(rgb2gs(self.energy)) + " " +
                         str(rgb2gs(self.homogenity)) + " " + str(rgb2gs(self.korelasion)) + "\n")
        with open("type.txt", "a") as myfile:
            myfile.write(str(1) + ",\n")


def rgb2gs(rgb):
    val = 0.114 * (rgb[0]) + 0.587 * (rgb[1]) + 0.299 * (rgb[2])
    return val


def main_test(img_link):
    dfeature = pd.read_csv('ALL11.csv')
    # image_path = '/content/drive/My Drive/EDU/mdb023ll.pgm'
    # testImage =  cv2.imread(img)
    # req = urllib.request.urlopen(img_link)
    # img = np.full((100, 80, 3), 12, dtype=np.uint8)
    # arr = np.full(bytearray(req.read()), dtype=np.uint8)
    # testImage = cv2.imdecode(arr, -1)
    # testImage=mpimg.imread(img)

    testImage = imutils.url_to_image(img_link)
    plt.imsave('orginal.jpg', testImage)

    # plt.imshow(testImage)
    # h, i, j = testImage.shape
    # applay algorithms
    segmented = watershed(testImage)  # Segmented image print in app
    plt.imsave('segmented.jpg', segmented)

    # img = Image.open(segmented)
    # img.show()
    # os.system(segmented)
    glcm = GLCM(segmented, 0, 1)
    imglcm = glcm.glcm.astype(np.uint8)
    # Classification function
    # print(dfeature.head(1))
    testMeanI = glcm.meanI[1]
    testMeanj = glcm.meanJ[1]
    testTaoI = glcm.taoI[1]
    testTaoJ = glcm.taoJ[1]
    testKontars = glcm.kontras[1]
    testEnergy = glcm.energy[1]
    testHomogenitas = glcm.homogenity[1]
    testCorrelation = glcm.korelasion[1]
    # print('testMeanI = ',testMeanI)
    # print('testMeanj = ',testMeanj)
    # print('testTaoI = ',testTaoI)
    # print('testTaoJ = ',testTaoJ)
    # print('testKontars = ',testKontars)
    # print('testEnergy = ',testEnergy)
    # print('testHomogenitas = ',testHomogenitas)
    # print('testCorrelation = ',testCorrelation)
    testImageFe = [testMeanI, testMeanj, testTaoI, testTaoJ, testKontars, testEnergy, testHomogenitas, testCorrelation]
    distance_list = []
    # distance_list.append(testEnergy + testHomogenitas  + testCorrelation + testKontars + testMeanI + testMeanj + testTaoI + testTaoJ)
    # print (distance_list)
    # print(len(dfeature))
    for i in range(len(dfeature)):  # 322
        z1 = (testImageFe[0] - dfeature['meanI'][i]) ** 2
        z2 = (testImageFe[1] - dfeature['meanJ'][i]) ** 2
        z3 = (testImageFe[2] - dfeature['taoI'][i]) ** 2
        z4 = (testImageFe[3] - dfeature['taoJ'][i]) ** 2
        z5 = (testImageFe[4] - dfeature['kontras'][i]) ** 2
        z6 = (testImageFe[5] - dfeature['Energy'][i]) ** 2
        z7 = (testImageFe[6] - dfeature['Homogenitas'][i]) ** 2
        z8 = (testImageFe[7] - dfeature['Correlation'][i]) ** 2
        z9 = [dfeature['Class'][i]]
        distance = [mt.sqrt(z1 + z2 + z3 + z4 + z5 + z6 + z7 + z8)]
        # print('z1 = ',z1)
        # print('z2 = ',z2)
        # print('z3 = ',z3)
        # print('z4 = ',z4)
        # print('z5 = ',z5)
        # print('z6 = ',z6)
        # print('z7 = ',z7)
        # print('z8 = ',z8)
        # print('z9 = ',z9)
        # print(dfeature['meanI'][i])
        # print(dfeature['meanJ'][0])
        # print(testImageFe[1])
        # x=dfeature['meanJ'][0]-testImageFe[1]
        # print(x**2)
        # print(dfeature['taoI'][i])
        # print(+dfeature['taoJ'][i])
        # print('kontras')
        # print(dfeature['kontars'][i])
        # print(dfeature['Homogenitas'][i])
        # print('energy')
        # print(dfeature['Energy'][i])
        # print(dfeature['Correlation'][i])
        # print(z2)
        # print(distance)
        distance_list.append(distance + z9)
    distance_list.sort()
    # print('class = ', distance_list[0][1])
    return distance_list[0][1]


# kontras, meanI, meanJ, energy, homogenity = contrast(glcm)
# taoI, taoJ = tao(glcm, meanI, meanJ)
# korelasion = correlation(glcm, meanI, meanJ, taoI, taoJ)
# print "meanI = " + str(rgb2gs(glcm.meanI))
# print "meanJ = " + str(rgb2gs(glcm.meanJ))
# print "taoI = " + str(rgb2gs(glcm.taoI))
# print "taoJ = " + str(rgb2gs(glcm.taoJ))
# print "kontras = " + str(rgb2gs(glcm.kontras))
# print "Energy = " + str(rgb2gs(glcm.energy))
# print "Homogenitas = " + str(rgb2gs(glcm.homogenity))
# print "Correlation = " + str(rgb2gs(glcm.korelasion))
# print glcm


# def test_image(img):
#     imaage = img.copy()
#     if (imaage[2, 5] == 0).all():
#         return "0"
#     else:
#         return "1"
# ttry = imaage
# height, width, depth = imaage.shape
# for i in range(0, height):
#     for j in range(0, width):
#         if (imaage[i, j] == 0).all():
#             return "1"
#         else:
#             return "0"
# current_time = datetime.datetime.now()
# name=current_time.hour + current_time.minute + current_time.second + current_time.microsecond + current_time.day + current_time.month + current_time.year
# global_path = "testtest/"+str(name)+".png"
# print(global_path)


def url_to_image(url):
    # download the image, convert it to a NumPy array, and then read
    # it into OpenCV format

    # resp = urllib.request.urlopen(url)
    # image = np.asarray(bytearray(resp.read()), dtype="uint8")
    # image = cv2.imdecode(image, cv2.IMREAD_COLOR)

    images = io.imread(url, 0)
    # images = requests.get(url, stream=True)
    # images=mpimg.imread(images)
    # image = Image.open(urllib.request.urlopen(url))
    # ret, thresh2 = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY_INV)
    # image = cv2.resize(image, (500, 500))
    # result = test_image(image)
    return images

    # cv2.imshow("Image", image)
    # cv2.waitKey(0)


config = {
    # "apiKey": "AIzaSyD0h93yNNgfyMcsIH9pTChBBiq8nWPi5Ro",
    # "authDomain": "breast-cancer-199344.firebaseapp.com",
    # "databaseURL": "https://breast-cancer-199344.firebaseio.com/",
    # "storageBucket": "gs://breast-cancer-199344.appspot.com"

    "apiKey": "AIzaSyD0h93yNNgfyMcsIH9pTChBBiq8nWPi5Ro",
    "authDomain": "breast-cancer-199344.firebaseapp.com",
    "databaseURL": "https://breast-cancer-199344.firebaseio.com",
    "projectId": "breast-cancer-199344",
    "storageBucket": "breast-cancer-199344.appspot.com",
    "messagingSenderId": "1021414509817",
    "appId": "1:1021414509817:web:ea25ed6614b7bb2468a628",
    "measurementId": "G-FSN4V2BWLZ"
}

# cred=credentials.Certificate('breast-cancer-199344-firebase-adminsdk-h6kqm-8a9ee80b09.json')
# breast-cancer-199344-firebase-adminsdk-h6kqm-8a9ee80b09.json
# firebase = Firebase(config)
firebase = pyrebase.initialize_app(config)

auth = firebase.auth()

user_u = auth.sign_in_with_email_and_password('mohannad199344@outlook.com', '12345678')

# auth=firebase.auth()
# user=auth.sign_in_with_email_and_password('mohannaad199344@outlook.com','12345678')
db = firebase.database()


# data = {
#     "name": "Joe Tilsed"
# }
#
# db.child("User Info").push(data, user['idToken'])
# push/set data
# data = {"name": "Joe Tilsed"}
# db.child("test").push(data)
# if db.child("Queue").get().each() == None:
#     print('empty')
# else:
#     print('not empty')

# users = db.child("User Info").child('xYrLnxbzF7U1daYJV8kuyC2AdIO2').child('age').get()
# print(users.val())
def upload_img(img, folder):
    current_time = datetime.datetime.now()
    date = current_time.hour + current_time.minute + current_time.second + current_time.microsecond + current_time.day + current_time.month + current_time.year
    name = str(date) + 'jpg'
    storage = firebase.storage()
    img_url = storage.child(folder).child(name).put(img, user_u['idToken'])
    url = storage.child(folder).child(name).get_url(img_url['downloadTokens'])
    return url


x = 0
y = 0
# if request.auth != null

while True:
    user_u = auth.refresh(user_u['refreshToken'])
    if db.child("Queue").get(user_u['idToken']).each() != None:
        all_samples = db.child("Queue").get(user_u['idToken'])
        for user in all_samples.each():
            key = user.key()
            sample_id = db.child("Queue").child(key).get(user_u['idToken']).val()
            user_id = db.child("Cancer Sample").child(sample_id).child("user id").get(user_u['idToken']).val()
            # image = url_to_image(db.child("Cancer Sample").child(sample_id).child("cancer image").get(user_u['idToken']).val())
            link = db.child("Cancer Sample").child(sample_id).child("cancer image").get(user_u['idToken']).val()
            image_result = str(main_test(link))

            enhancement = upload_img('speckle.jpg', "Enhancement")
            segmenation = upload_img('watershade.jpg', "Segmentation")

            db.child("Cancer Sample").child(sample_id).child("enhancement").set(enhancement, user_u['idToken'])
            db.child("Cancer Sample").child(sample_id).child("segmentation").set(segmenation, user_u['idToken'])

            db.child("Cancer Sample").child(sample_id).child("diagnosis").set(image_result, user_u['idToken'])
            db.child("User Info").child(user_id).child("last diagnosis").set(image_result, user_u['idToken'])
            db.child("Queue").child(key).remove(user_u['idToken'])
            print(
                "\n.\n.\n.\nqueue key: " + key + "\n" + "sample id: " + sample_id + "\n" + "user id: " + user_id + "\n" + "image result: " + image_result + "\n.\n.\n.\n")
            # print(url)
            # url_to_image(url)
            # cv2.waitKey(100)
            x = 0

    else:
        x = x + 1
        s = 'empty' + str(x)
        print(s)
